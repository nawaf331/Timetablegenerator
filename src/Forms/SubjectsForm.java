/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Forms;

import Main.extractSubjectDetails;
import ds.Subjects;
import java.awt.Cursor;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import run.DBConnectTT;
import run.DBInterfaceTT;

/**
 *
 * @author DELL
 */
public class SubjectsForm extends javax.swing.JFrame {

    private final DefaultTableModel tmSubDetails;
    DefaultComboBoxModel<String> handleBy;
    int ttl = 0;

    /**
     * Creates new form Subjects
     */
    public SubjectsForm() {
        initComponents();
        handleBy = new DefaultComboBoxModel<String>();
        this.setTitle("Add Subjects");

        this.pack();
        this.setLocationRelativeTo(null);
        tmSubDetails = new DefaultTableModel();
        tSubjectTable.setModel(tmSubDetails);
        tmSubDetails.setRowCount(0);

        tmSubDetails.addColumn("Sl No");
        tmSubDetails.addColumn("Code");
        tmSubDetails.addColumn("Name");
        tmSubDetails.addColumn("Type");
        tmSubDetails.addColumn("Sem");
        tmSubDetails.addColumn("Handled by");

        retrievTableContents();
        fillHandleBy();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tSubjectTable = new javax.swing.JTable();
        bLoadFromFile = new javax.swing.JButton();
        bOk = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        tfSubCode = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfSubName = new javax.swing.JTextField();
        cbType = new javax.swing.JComboBox();
        cbSem = new javax.swing.JComboBox();
        cbHandleBy = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        bClearAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("  Subjects Details");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        tSubjectTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Serial No", "Subject Name", "Subject Code", "Handled by"
            }
        ));
        jScrollPane1.setViewportView(tSubjectTable);

        bLoadFromFile.setText("Load from file");
        bLoadFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLoadFromFileActionPerformed(evt);
            }
        });

        bOk.setText("Ok");
        bOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOkActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Add New", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jLabel5.setText("Sub Code : ");

        jLabel2.setText("Sub Name: ");

        cbType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "theory", "lab" }));

        cbSem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "3", "4", "5", "6", "7", "8" }));
        cbSem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSemActionPerformed(evt);
            }
        });

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Handle By :");

        jLabel4.setText("Sem : ");

        jLabel6.setText("Type : ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(tfSubCode, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfSubName, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cbSem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6)
                                .addGap(75, 75, 75)
                                .addComponent(cbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cbHandleBy, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tfSubCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(tfSubName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbHandleBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(cbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6))
                .addContainerGap())
        );

        bClearAll.setText("Clear All");
        bClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bClearAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bOk, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 9, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(bClearAll))
                            .addComponent(bLoadFromFile)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(226, 226, 226)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(bOk))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bLoadFromFile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bClearAll))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bLoadFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLoadFromFileActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Upload any text file, containing subject details in each line\nFormate:\n\n<SUB CODE>,<SUBNAME>,<TYPE>,<SEM>,<FACULTY ID WHO HANDLE>\nTYPE must be either 'theory' or 'lab' both should be small case", "BIT-RAAT :  Help", JOptionPane.OK_OPTION);

        Connection con = null;
        Statement st = null;
        DBConnectTT.getConnection();
        con = DBConnectTT.connection;
        //Create a file chooser
        Subjects s;
        JFileChooser fc = null;
        String inFile;
        try {
            fc = new JFileChooser(previousDirectory());

        } catch (IOException e) {

        }
        //In response to a button click:
        int returnVal = fc.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            setCursor(Cursor.WAIT_CURSOR);
            File file = fc.getSelectedFile();
            //This is where a real application would open the file.
            inFile = file.getAbsolutePath();
            saveCurrentDirectory(file.getParentFile().getAbsolutePath());
            //e = new extractUSN(inFile);
            extractSubjectDetails e = new extractSubjectDetails();

            //System.out.println("FILE USN SIZE : " + FileUsn.size());
            s = e.getSubjectDetails(inFile);
            //System.out.println("FILE USN SIZE : " + FileUsn.size());

            //use s
            for (int i = 0; i < s.subCode.size(); i++) {

                try {
                    String query = "insert into " + DBInterfaceTT.TT_SUBJECT_DETAILS + " values ('" + s.subCode.get(i) + "','" + s.subName.get(i) + "','" + s.type.get(i) + "','" + s.fid.get(i) + "','" + s.sem.get(i) + "')";
                    st = con.createStatement();
                    st.executeUpdate(query);
                    System.out.println(s.subName.get(i) + " is inserted");
                } catch (SQLException ex) {
                    System.out.println("err: " + ex.getMessage());
                    // Logger.getLogger(SubjectsForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            System.out.println("Open command cancelled by user.");
        }

        retrievTableContents();
        setCursor(Cursor.getDefaultCursor());

    }//GEN-LAST:event_bLoadFromFileActionPerformed

    private void bOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOkActionPerformed
        // TODO add your handling code here:

        this.dispose();
    }//GEN-LAST:event_bOkActionPerformed

    private void cbSemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbSemActionPerformed

    private void bClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bClearAllActionPerformed
        // TODO add your handling code here:
        if (JOptionPane.showConfirmDialog(null, "Are you sure? It will clear all the records", "Are you sure?", JOptionPane.OK_CANCEL_OPTION) != 0) {
            return;
        }
        Connection con = null;
        Statement stmt = null;
        DBConnectTT.getConnection();
        con = DBConnectTT.connection;

        try {
            stmt = con.createStatement();
            stmt.executeUpdate("delete from " + DBInterfaceTT.TT_SUBJECT_DETAILS);
        } catch (SQLException ex) {
            Logger.getLogger(LecturerForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        retrievTableContents();

    }//GEN-LAST:event_bClearAllActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String subCode = tfSubCode.getText();
        String subName = tfSubName.getText();
        String sem = cbSem.getSelectedItem().toString();
        String type = cbType.getSelectedItem().toString();
        String handleBy = cbHandleBy.getSelectedItem().toString();
        if ((subCode.equals("") || subName.equals(""))) {
            JOptionPane.showMessageDialog(null, "Fields Cannnot be empty..!", "Error", JOptionPane.OK_OPTION);
            return;
        }
        Connection con = null;
        Statement stmt = null, stmt2 = null;
        ResultSet rs = null;
        String Fid = null;

        DBConnectTT.getConnection();
        con = DBConnectTT.connection;

        try {
            stmt = con.createStatement();
            rs = stmt.executeQuery("select " + DBInterfaceTT.TT_F_ID + " from " + DBInterfaceTT.TT_FACULTY_DETAILS + " where " + DBInterfaceTT.TT_F_NAME + " = '" + handleBy + "'");

            rs.next();
            Fid = rs.getString(DBInterfaceTT.TT_F_ID);

        } catch (SQLException ex) {
            Logger.getLogger(SubjectsForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {

            stmt2 = con.createStatement();
            stmt2.executeUpdate("insert into " + DBInterfaceTT.TT_SUBJECT_DETAILS + " values ('" + subCode + "','" + subName + "','" + type + "','" + Fid + "','" + sem + "')");
            JOptionPane.showMessageDialog(null, "New Record inserted successfully....", " Error", JOptionPane.OK_OPTION);
            retrievTableContents();

            return;
        } catch (SQLException ex) {
            System.out.print("\nSQLExeption : " + ex.getMessage());
        }
        JOptionPane.showMessageDialog(null, "Unable to insert this record..\nMay be this code already done, check above table", "Error", JOptionPane.OK_OPTION);


    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bClearAll;
    private javax.swing.JButton bLoadFromFile;
    private javax.swing.JButton bOk;
    private javax.swing.JComboBox cbHandleBy;
    private javax.swing.JComboBox cbSem;
    private javax.swing.JComboBox cbType;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tSubjectTable;
    private javax.swing.JTextField tfSubCode;
    private javax.swing.JTextField tfSubName;
    // End of variables declaration//GEN-END:variables

    private String previousDirectory() throws IOException {
        BufferedReader br = null;
        String line = "";
        try {
            br = new BufferedReader(new FileReader(".previouslySelectedDirectory.txt"));
            line = br.readLine();
        } catch (Exception e) {

            System.out.println("Error: " + e);
        } finally {
            if (br != null) {
                br.close();
            }
        }
        return line;

    }

    private void saveCurrentDirectory(String absolutePath) {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter(".previouslySelectedDirectory.txt"));
            writer.write(absolutePath);
            writer.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            System.out.println("Error:" + e);
        }

    }

    private void retrievTableContents() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        tmSubDetails.setRowCount(0);
        Connection con = null, con2 = null;
        Statement stmt = null;
        ResultSet rs = null;
        int rowCount = 0;
        DBConnectTT.getConnection();
        con = DBConnectTT.connection;
        con2 = DBConnectTT.connection;
        String q = "Select * from " + DBInterfaceTT.TT_SUBJECT_DETAILS;

        try {
            stmt = con.createStatement();
            rs = stmt.executeQuery(q);

            while (rs.next()) {
                String code = rs.getString(DBInterfaceTT.TT_SUB_CODE);
                String name = rs.getString(DBInterfaceTT.TT_SUB_SUBNAME);
                String sem = rs.getString(DBInterfaceTT.TT_SUB_SEM);
                String type = rs.getString(DBInterfaceTT.TT_SUB_TYPE);
                String fid = rs.getString(DBInterfaceTT.TT_SUB_FID);
                String fname = null;

                String q1;
                q1 = "select * from " + DBInterfaceTT.TT_FACULTY_DETAILS + " where " + DBInterfaceTT.TT_F_ID + " = '" + fid + "'";

                Statement s2 = null;
                ResultSet r2 = null;

                s2 = con2.createStatement();
                System.out.println("connected" + q1);
                r2 = s2.executeQuery(q1);
                System.out.println("fetched");

                r2.next();
                System.out.println("moved next");
                try {
                    fname = r2.getString(DBInterfaceTT.TT_F_NAME);
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
                System.out.println(fname);
                tmSubDetails.insertRow(rowCount++, new Object[]{rowCount, code, name, type, sem, fname});

                s2.close();

                r2.close();

            }

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
            Logger.getLogger(LecturerForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        tSubjectTable.setModel(tmSubDetails);

    }

    private void fillHandleBy() {
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;

        DBConnectTT.getConnection();
        con = DBConnectTT.connection;
        handleBy.removeAllElements();
        try {
            stmt = con.createStatement();
            rs = stmt.executeQuery("select distinct " + DBInterfaceTT.TT_F_NAME + " from " + DBInterfaceTT.TT_FACULTY_DETAILS);
            while (rs.next()) {
                ttl++;
                handleBy.addElement(rs.getString(DBInterfaceTT.TT_F_NAME));

            }
        } catch (SQLException ex) {
            Logger.getLogger(SubjectsForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        cbHandleBy.setModel(handleBy);
        if (ttl <= 0) {
            JOptionPane.showMessageDialog(null, "You should insert lecture details first...", "No Lecture", JOptionPane.OK_OPTION);
            new LecturerForm().setVisible(true);
            this.setVisible(false);
            this.dispose();

            setVisible(false);
            dispose();

        }

    }

}
